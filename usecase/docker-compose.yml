version: '3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
  nifi:
    image: apache/nifi:1.21.0
    container_name: nifi
    ports:
      - "8080:8080"
    environment:
      NIFI_WEB_HTTP_PORT: 8080
      #NIFI_JVM_HEAP_INIT: "2g"
      #NIFI_JVM_HEAP_MAX: "2g"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # wget https://jdbc.postgresql.org/download/postgresql-42.2.2.jar
      - ./postgresql-42.2.2.jar:/opt/nifi/nifi-current/postgresql-42.2.2.jar
      # /etc/hadoop/core-site.xml
      - ./core-site.xml:/opt/nifi/nifi-current/conf/core-site.xml
      - ./kafka_client_jaas.conf:/opt/nifi/nifi-current/conf/kafka_client_jaas.conf
      - ./bootstrap.conf:/opt/nifi/nifi-current/conf/bootstrap.conf
      - ./airport-frequencies.csv:/opt/nifi/nifi-current/datasets/airport-frequencies.csv
      - ./regions.csv:/opt/nifi/nifi-current/datasets/regions.csv
      - ./runways.csv:/opt/nifi/nifi-current/datasets/runways.csv
  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432"
    volumes:
      - ./countries.csv:/countries.csv
  kafka:
    image: wurstmeister/kafka:2.13-2.6.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_PLAINTEXT
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      #KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.auth.SimpleAclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LISTENERS: PLAINTEXT://:9092,SASL_PLAINTEXT://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://172.17.0.1:9092,SASL_PLAINTEXT://172.17.0.1:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OPTS: '-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf'
      #KAFKA_ADVERTISED_HOST_NAME: 172.31.19.145
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
      - ./kafka_client_jaas.conf:/etc/kafka/kafka_client_jaas.conf
      - ./consumer.properties:/opt/kafka/config/consumer.properties
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.0
    container_name: elasticsearch
    restart: always
    container_name: elasticsearch
    environment:
      node.name: elasticsearch
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      ELASTIC_PASSWORD: changeme
    ports:
      - "9200:9200"
      - "9300:9300"
  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.0
    container_name: kibana
    restart: always
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      XPACK_MONITORING_ENABLED: "true"
    ports:
    - "5601:5601"
    depends_on:
     - elasticsearch
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
  
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop.env

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
  
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
  
volumes:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_historyserver:
